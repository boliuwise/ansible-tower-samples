nsible_ssh_user: 'root'
#安装源文件和目标服务器上传路径位置
app_home: '/2decision'
app_data: '/data'
src_dir: '{{app_home}}/ansible-project/decision-software'
dest_dir: '{{app_home}}/ansible-project/decision-software'
#通用二进制软件目录
common_bin_software_src_dir: '{{app_home}}/ansible-project/common-bin-software-x64'
common_bin_software_dest_dir: '{{app_home}}/ansible-project/common-bin-software-x64'
#监控通用二进制软件目录
monitor_common_bin_software_src_dir: '{{app_home}}/ansible-project/monitor-common-bin-software-x64'
monitor_common_bin_software_dest_dir: '{{app_home}}/ansible-project/monitor-common-bin-software-x64'
#通用docker软件目录
common_docker_software_src_dir: '{{app_home}}/ansible-project/common-docker-software-x64'
common_docker_software_dest_dir: '{{app_home}}/ansible-project/common-docker-software-x64'
#基础服务软件目录
base_software_src_dir: '{{app_home}}/ansible-project/base-software'
base_software_dest_dir: '{{app_home}}/ansible-project/base-software'
#模型实验室软件目录
model_software_src_dir: '{{app_home}}/ansible-project/model-software'
model_software_dest_dir: '{{app_home}}/ansible-project/model-software'

model_lab_software_src_dir: '{{app_home}}/ansible-project/model-lab-software'
model_lab_software_dest_dir: '{{app_home}}/ansible-project/model-lab-software'
#模型实验室算法服务软件目录
model_algo_software_src_dir: '{{app_home}}/ansible-project/model-algo-software'
model_algo_software_dest_dir: '{{app_home}}/ansible-project/model-algo-software'
#睿策软件目录
decision_software_src_dir: '{{app_home}}/ansible-project/decision-software'
decision_software_dest_dir: '{{app_home}}/ansible-project/decision-software'
#睿信软件目录
ruixin_software_src_dir: '{{app_home}}/ansible-project/ruixin-software'
ruixin_software_dest_dir: '{{app_home}}/ansible-project/ruixin-software'
#睿鼎软件目录
ruiding_software_src_dir: '{{app_home}}/ansible-project/ruiding-software'
ruiding_software_dest_dir: '{{app_home}}/ansible-project/ruiding-software'
server_init_dir: '/etc/init.d/'

#jdk
jdk_base_path: '{{app_home}}/jdk'
jdk_source_file: '/etc/profile.d/java.sh'



- name: 1-判断jdk是否存在
  shell: java -version
  register: get_jdk
  ignore_errors: yes

- name: 2-如果存在jdk则删除
  shell: cd /opt && rm -rf jdk && cd /etc/profile.d && rm -rf java.sh
  when: get_jdk.stdout.find("version") != ""

- name: 1-创建软件目录
  file: dest={{ item }} state=directory
  with_items:
    - "{{ common_bin_software_dest_dir }}"
    - "{{ jdk_base_path }}"

- name: 2-上传软件
  unarchive: src={{ item }} dest={{ common_bin_software_dest_dir }}
  with_fileglob:
    - "{{ common_bin_software_src_dir }}/jdk*.tar.gz"

- name: 3-安装jdk
  shell: cd {{ common_bin_software_dest_dir }}/jdk1* && yes | mv * {{ jdk_base_path }}/
  ignore_errors: yes

- name: 4-配置环境变量
  template: src=java.sh.j2 dest={{ jdk_source_file }}

- name: 验证部署结果
  shell: source /etc/profile && java -version
  register: get_jdk

- name: 输出部署结果
  debug:
    msg: jdk部署成功！
  when: get_jdk.stdout.find('1.8.0_181') != ""
